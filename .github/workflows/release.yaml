name: Release
on:
  push:
    branches:
      - master
      - feature/268-improve-release-image

env:
  REGISTRY: ghcr.io
  REGISTRY_PREFIX: ghcr.io/${{ github.repository_owner }}
  IMAGE_NAME: podcast-service
  IMAGE_TAG: latest

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: ${{ secrets.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v1
      - name: Prepare .env file
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
        run: |
          cp .env.template .env
          env >> .env

      - name: Build image
        run: docker compose build test

      - name: Run tests
        run: docker compose up --exit-code-from test test

  build:
    needs: [test]
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_PREFIX }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,event=branch,value=latest

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare SSH file
        run: |
          mkdir ~/.ssh
          echo "${{ secrets.SSH_PKEY }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa

      - name: Delivery Updates
        run: |
          scp -o StrictHostKeyChecking=no -P ${{ secrets.SSH_PORT }} ./.env.template ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.PROJECT_ROOT }}/.env.template
          scp -o StrictHostKeyChecking=no -P ${{ secrets.SSH_PORT }} ./etc/docker-compose.yaml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.PROJECT_ROOT }}/docker-compose.yaml
          scp -o StrictHostKeyChecking=no -P ${{ secrets.SSH_PORT }} ./etc/deploy.sh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.PROJECT_ROOT }}/deploy.sh
          scp -o StrictHostKeyChecking=no -P ${{ secrets.SSH_PORT }} ./etc/migrate_db.sh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.PROJECT_ROOT }}/migrate_db.sh

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PKEY }}
          script: |
            export DEPLOY_MODE=CI
            export REGISTRY_PREFIX=${{ secrets.REGISTRY_PREFIX }}
            export IMAGE_NAME=${{ secrets.IMAGE_NAME }}
            export IMAGE_TAG=${{ secrets.IMAGE_TAG }}
            cd ${{ secrets.PROJECT_ROOT }}
            sh deploy.sh
