"""Episodes: new status CANCELING

Revision ID: 0018
Revises: 0017
Create Date: 2023-08-05 19:53:57.970306

"""

from alembic import op
from sqlalchemy import text
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "0018"
down_revision = "0017"
branch_labels = None
depends_on = None

OLD_STATUSES = (
    "NEW",
    "DOWNLOADING",
    "PUBLISHED",
    "ARCHIVED",
    "ERROR",
)
NEW_STATUSES = ("CANCELING",)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "podcast_cookies",
        "source_type",
        existing_type=postgresql.ENUM("YOUTUBE", "YANDEX", "UPLOAD", name="source_type"),
        nullable=False,
    )
    op.alter_column(
        "podcast_episodes",
        "source_type",
        existing_type=postgresql.ENUM("YOUTUBE", "YANDEX", "UPLOAD", name="source_type"),
        nullable=False,
    )
    op.execute("ALTER TYPE episode_status ADD VALUE 'CANCELING'")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "podcast_episodes",
        "source_type",
        existing_type=postgresql.ENUM("YOUTUBE", "YANDEX", "UPLOAD", name="source_type"),
        nullable=True,
    )
    op.alter_column(
        "podcast_cookies",
        "source_type",
        existing_type=postgresql.ENUM("YOUTUBE", "YANDEX", "UPLOAD", name="source_type"),
        nullable=True,
    )
    _remove_enum_value(type_name="episode_status")
    # ### end Alembic commands ###


def _remove_enum_value(type_name: str):
    connection = op.get_bind()
    connection.execute(text("UPDATE podcast_episodes SET status='ERROR' WHERE status='CANCELING'"))
    connection.execute(text(f"ALTER TYPE episode_status RENAME TO {type_name}_old;"))

    enum_psql_type = postgresql.ENUM(*OLD_STATUSES, name=type_name)
    enum_psql_type.create(connection, checkfirst=True)
    connection.execute(
        text(
            f"ALTER TABLE podcast_episodes ALTER COLUMN status TYPE {type_name} USING status::text::{type_name};"
        )
    )
    connection.execute(text(f"DROP TYPE IF EXISTS {type_name}_old;"))
